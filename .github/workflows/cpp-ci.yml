name: C++ CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    paths:
      - 'cpp/**'
      - 'proto/**'
      - '.github/workflows/cpp-ci.yml'

defaults:
  run:
    working-directory: cpp

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Debug, Release]
        include:
          - os: ubuntu-latest
            cxx: g++
          - os: macos-latest
            cxx: clang++

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        # Wait for any existing apt processes to finish
        while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
          echo "Waiting for other apt processes to finish..."
          sleep 10
        done
        sudo apt-get update
        sudo apt-get install -y cmake protobuf-compiler libprotobuf-dev libabsl-dev

    - name: Install dependencies (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        brew install cmake protobuf abseil

    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }}

    - name: Build
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }} -j$(nproc 2>/dev/null || sysctl -n hw.ncpu)

    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}

    - name: Run examples
      run: |
        cd build
        ./examples/basic_example
        ./examples/cpu_emulator_example
        # Check that trace files were created
        test -f example.perfetto-trace
        test -f z80_emulation.perfetto-trace

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        # Wait for any existing apt processes to finish
        while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
          echo "Waiting for other apt processes to finish..."
          sleep 10
        done
        sudo apt-get update
        sudo apt-get install -y clang-tidy cppcheck

    - name: Run clang-tidy
      run: |
        # Debug: Show current directory and structure
        echo "Current working directory: $(pwd)"
        echo "Directory listing:"
        ls -la
        echo "Looking for cpp directory:"
        ls -la cpp/ || echo "cpp/ directory not found"
        
        # Check if directory exists first
        if [ -d "cpp/include" ]; then
          # Find .hpp files and run clang-tidy on them
          hpp_files=$(find cpp/include -name '*.hpp')
          if [ -n "$hpp_files" ]; then
            echo "Running clang-tidy on C++ header files..."
            echo "$hpp_files" | xargs clang-tidy -checks='-*,bugprone-*,cert-*,clang-analyzer-*,modernize-*,performance-*,portability-*,readability-*' -- -std=c++17 -I/usr/include
          else
            echo "No .hpp files found in cpp/include"
          fi
        else
          echo "Directory cpp/include not found"
          echo "Available directories:"
          find . -type d -name include 2>/dev/null || echo "No include directories found"
          exit 1
        fi

    - name: Run cppcheck
      run: |
        # Check if directory exists first
        if [ -d "cpp/include" ]; then
          echo "Running cppcheck on C++ header files..."
          cppcheck --enable=all --std=c++17 --suppress=missingIncludeSystem cpp/include/
        else
          echo "Directory cpp/include not found"
          exit 1
        fi

  documentation:
    name: Check Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Check README exists
      run: test -f README.md

    - name: Check header documentation
      run: |
        # Check that the main header has documentation
        grep -q "retrobus_perfetto.hpp - Header-only C++ library" include/retrobus/retrobus_perfetto.hpp